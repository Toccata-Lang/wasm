
(add-ns wasm (module "wasm.toc"))

(add-ns cont (git-dependency "https://github.com/Toccata-Lang/continuation"
                             "continuation.toc"
                             :sha "29c75f0"))

(defprotocol DOM
  (create-node [x]
    (create-node (str x))))

(defn node= [n1 n2]
  (inline C Maybe "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendMaybe(objDeref($0) == objDeref($1));},
   extractDOMObject(n1_0), extractDOMObject(n2_1));
#else
Value *x = nothing;
#endif
   dec_and_free(n1_0, 1);
   dec_and_free(n2_1, 1);
   return((Value *)x);\n"))

(deftype DOMNode [x]
  (assert (instance? Opaque x))

  Stringable
  (string-list [_]
    (list "<DOMNode>"))

  wasm/ObjGetterSetter
  (wasm/get-obj-field [_ field]
    (wasm/get-obj-field x field))
  (wasm/set-obj-field [_ field value]
    (wasm/set-obj-field x field value))

  Eq
  (=* [n1 n2]
    (node= n1 n2)))

(deftype XMLHttpRequest [x]
  (assert (instance? Opaque x))

  Stringable
  (string-list [_]
    (list "<XMLHttpRequest>")))

(def DOMObject (comp DOMNode
                     XMLHttpRequest))

(defn inner-html
  ([node]
   (assert (instance? DOMNode node))

   (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendString(objDeref($0).innerHTML);},
   extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))
  ([node s]
   (assert (instance? DOMNode node))
   (assert (instance? String s))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
   EM_ASM_({
     objDeref($0).innerHTML = rcvString($1);},
   extractDOMObject(node_0), (int)s_1);
#endif
   dec_and_free(s_1, 1);
   return(node_0);\n")))

(defn outer-html
  ([node]
   (assert (instance? DOMNode node))

   (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendString(objDeref($0).outerHTML);},
   extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))
  ([node s]
   (assert (instance? DOMNode node))
   (assert (instance? String s))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
   EM_ASM_({
     objDeref($0).outerHTML = rcvString($1);},
   extractDOMObject(node_0), (int)s_1);
#endif
   dec_and_free(s_1, 1);
   return(node_0);\n")))

(defn client-x [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     console.log(\"obj: \" + objDeref($0));
     return sendValue(0);},
   extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn client-y [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendValue(objDeref($0).clientY);},
   extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn get-bounding-client-rect [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({let rect = objDeref($0).getBoundingClientRect();
                       return sendValue([rect.top, rect.bottom,
                                         Math.round(rect.left), Math.round(rect.right)]);},
                      extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn add-event-listener
  ([node eventName handler] (add-event-listener node eventName handler nothing))
  ([node eventName handler capture]
   (assert (instance? DOMNode node))
   (assert (instance? String eventName))
   (assert (instance? String handler))

   (inline C Maybe "
   if (isNothing(capture_3, \"\", 0)) {
#ifdef TOCCATA_WASM
   EM_ASM_({
objDeref($0).addEventListener(rcvString($1), eval(rcvString($2)));},
           extractDOMObject(node_0), eventName_1, handler_2);
#endif
   dec_and_free(node_0, 1);
   dec_and_free(eventName_1, 1);
   dec_and_free(handler_2, 1);
   dec_and_free(capture_3, 1);
} else {
#ifdef TOCCATA_WASM
   EM_ASM_({
objDeref($0).addEventListener(rcvString($1), eval(rcvString($2)), true);},
           extractDOMObject(node_0), eventName_1, handler_2);
#endif
   dec_and_free(node_0, 1);
   dec_and_free(eventName_1, 1);
   dec_and_free(handler_2, 1);
   dec_and_free(capture_3, 1);
}
   return(nothing);\n")))

(defn get-input-value [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
  int x = EM_ASM_INT({
               return sendValue(objDeref($0).value)},
  extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
  return((Value *)x);\n"))

(defn get-attribute [node key]
  (assert (instance? DOMObject node))

  (wasm/get-obj-field (.x node) key))

(defn get-checked [node]
  (assert (instance? DOMNode node))

  (inline C Maybe "
#ifdef TOCCATA_WASM
  int x = EM_ASM_INT({
               return sendMaybe(objDeref($0).checked)},
  extractDOMObject(node_0));
#else
Value *x = nothing;
#endif
  dec_and_free(node_0, 1);
  return((Value *)x);\n"))

(defn set-attribute [node key value]
  (assert (instance? DOMObject node))
  (assert (instance? String key))
  (assert (instance? String value))

  (inline C DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    objDeref($0).setAttribute(rcvString($1), rcvString($2))},
  extractDOMObject(node_0), (int)key_1, (int)value_2);
#endif
  dec_and_free(key_1, 1);
  dec_and_free(value_2, 1);
  return(node_0);\n"))

(defn set-style-attribute [node key value]
  (assert (instance? DOMNode node))
  (assert (instance? String key))
  (assert (instance? String value))

  (inline C DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    objDeref($0).style[rcvString($1)] = rcvString($2);},
  extractDOMObject(node_0),(int)key_1, (int)value_2);
#endif
  dec_and_free(key_1, 1);
  dec_and_free(value_2, 1);
  return(node_0);\n"))

(defn child-nodes* [node]
  (assert (instance? DOMNode node))

  (inline C "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendArray(objDeref($0).childNodes);},
           extractDOMObject(node_0));
#else
   Value *x = nothing;
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn child-nodes [node]
  (map (child-nodes* node) DOMNode))

(defn append-child [node child]
  (assert (instance? DOMNode node))
  (assert (instance? DOMNode child))

  (inline C DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    objDeref($0).appendChild(objDeref($1))},
  extractDOMObject(node_0),
  extractDOMObject(child_1));
#endif
  dec_and_free(child_1, 1);
  return(node_0);\n"))

(defn insert-before
  ([node child]
   (assert (instance? DOMNode node))
   (assert (instance? DOMNode child))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    objDeref($0).insertBefore(objDeref($1), null)},
  extractDOMObject(node_0),
  extractDOMObject(child_1));
#endif
  dec_and_free(child_1, 1);
  return(node_0);\n"))
  ([node child ref-node]
   (assert (instance? DOMNode node))
   (assert (instance? DOMNode child))
   (assert (instance? DOMNode ref-node))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    objDeref($0).insertBefore(objDeref($1), objDeref($2))},
  extractDOMObject(node_0),
  extractDOMObject(child_1),
  extractDOMObject(ref_node_2));
#endif
  dec_and_free(child_1, 1);
  dec_and_free(ref_node_2, 1);
  return(node_0);\n")))

(defn node-element-by-id
  ([s]
   (assert (instance? String s))

   (inline C Maybe "
   int strValue = (int)s_0;
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendMaybe(document.getElementById(rcvString($0)));},
           strValue);
#else
   Value *x = nothing;
#endif
   dec_and_free(s_0, 1);
   return((Value *)x);\n"))
  ([node s]
   (assert (instance? DOMNode node))
   (assert (instance? String s))

   (inline C Maybe "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendMaybe($0.getElementById(rcvString($1)));},
           extractDOMObject(node_0), (int)s_1);
#else
   Value *x = nothing;
#endif
   dec_and_free(node_0, 1);
   dec_and_free(s_1, 1);
   return((Value *)x);\n")))

(defn get-element-by-id
  ([s]
   (map (node-element-by-id s)
        DOMNode))
  ([node s]
   (map (node-element-by-id node s)
        DOMNode)))

(defn parent-node [node]
  (assert (instance? DOMNode node))

  (map (wasm/get-obj-field (.x node) 'parentNode) DOMNode))

(defn first-child [node]
  (assert (instance? DOMNode node))

  (map (wasm/get-obj-field (.x node) 'firstChild) DOMNode))

(defn next-sibling [node]
  (assert (instance? DOMNode node))

  (map (wasm/get-obj-field (.x node) 'nextSibling) DOMNode))

(defn previous-sibling [node]
  (assert (instance? DOMNode node))

  (map (wasm/get-obj-field (.x node) 'previousSibling) DOMNode))

(defn scroll-top
  ([node]
   (assert (instance? DOMNode node))

   (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendInteger(objDeref($0).scrollTop);},
   extractDOMObject(node_0));
#else
Value *x = integerValue(0);
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))
  ([node s]
   (assert (instance? DOMNode node))
   (assert (instance? Integer s))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
   EM_ASM_({
     objDeref($0).scrollTop = rcvInteger($1);},
   extractDOMObject(node_0), (int)s_1);
#endif
   dec_and_free(s_1, 1);
   return(node_0);\n")))

(defn scroll-by
  ([node yoff]
   (assert (instance? DOMNode node))
   (assert (instance? Integer yoff))

   (inline C DOMNode "
#ifdef TOCCATA_WASM
   EM_ASM_({
     objDeref($0).scrollBy(0, rcvInteger($1));},
   extractDOMObject(node_0), (int)yoff_1);
#endif
   dec_and_free(yoff_1, 1);
   return(node_0);\n")))

(defn scroll-height [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendInteger(objDeref($0).scrollHeight);},
   extractDOMObject(node_0));
#else
Value *x = integerValue(0);
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn client-height [node]
  (assert (instance? DOMNode node))

  (inline C Integer "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendInteger(objDeref($0).clientHeight);},
   extractDOMObject(node_0));
#else
Value *x = integerValue(0);
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn offset-top [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendInteger(objDeref($0).offsetTop);},
   extractDOMObject(node_0));
#else
Value *x = integerValue(0);
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n"))

(defn prepend-child [peeps el]
  (inline C String "
#ifdef TOCCATA_WASM
   EM_ASM({
  peeps.insertBefore(objDeref($1), objDeref($0).firstChild);
},
   extractDOMObject(peeps_0), extractDOMObject(el_1));
#endif
   dec_and_free(peeps_0, 1);
   dec_and_free(el_1, 1);
   return(nothing);\n"))

(defn remove [node]
  (assert (instance? DOMNode node))

  (inline C DOMNode "
#ifdef TOCCATA_WASM
   EM_ASM_({
     var node = objDeref($0); 
     node.parentNode.removeChild(node);},
   extractDOMObject(node_0));
#endif
   return(node_0);\n"))

(defn node-get-elements-by-class [s]
  (inline C Vector "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             let elements = document.getElementsByClassName(rcvString($0));
             let vect = _mallocVector();
             for (var i = 0; i < elements.length; i++) {
               _vectorConj(vect, sendValue(elements[i]));
             }
             return vect;}, (int)s_0);
#else
   Vector *x = empty_vect;
#endif
   dec_and_free(s_0, 1);
   return((Value *)x);\n"))

(defn get-elements-by-class-name [s]
  (map (node-get-elements-by-class s)
       DOMNode))

(defn node-get-elements-by-tag [s]
  (inline C Vector "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             let elements = document.getElementsByTagName(rcvString($0));
             return sendValue(Array.from(elements));}, (int)s_0);
#else
   Vector *x = empty_vect;
#endif
   dec_and_free(s_0, 1);
   return((Value *)x);\n"))

(defn get-elements-by-tag-name [s]
  (map (node-get-elements-by-tag s) DOMNode))

(defn text-node [s]
  (assert (instance? String s))

  (inline C Opaque "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendValue(document.createTextNode(rcvString($0)))},
           (int)s_0);
#else
   Value *x = opaqueValue(0, 0);
#endif
   dec_and_free(s_0, 1);
   return((Value *)x);\n"))

(defn createElement [tag]
  (inline C Opaque "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendValue(document.createElement(rcvString($0)));},
           (int)tag_0);
#else
   Value *x = opaqueValue(0, 0);
#endif
   dec_and_free(tag_0, 1);
   return((Value *)x);\n"))

(defn createElementNS [tag]
  (inline C Opaque "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
             return sendValue(document.createElementNS('http://www.w3.org/2000/svg', rcvString($0)));},
           (int)tag_0);
#else
   Value *x = opaqueValue(0, 0);
#endif
   dec_and_free(tag_0, 1);
   return((Value *)x);\n"))

(defn get-value [node]
  (assert (instance? DOMNode node))

  (inline C String "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     var e = objDeref($0);
     return(sendValue(e.value));},
   extractDOMObject(node_0));
#else
Value *x = stringValue(\"\");
#endif
   dec_and_free(node_0, 1);
   return((Value *)x);\n")
 )

(extend-type String
  DOM
  (create-node [s]
    (DOMNode (text-node s))))

(defn new-http-request* []
  (inline C Opaque "
#ifdef TOCCATA_WASM
   int x = EM_ASM_INT({
     return sendObject(new XMLHttpRequest());});
#else
  Value *x = opaqueValue((void *)0, (Destructor *)0);
#endif
   return((Value *)x);\n"))

(defn new-http-request []
  (XMLHttpRequest (new-http-request*)))

(defn send-http-request
  ([rqst method url]
   (assert (instance? XMLHttpRequest rqst))
   (assert (instance? String method))
   (assert (instance? String url))

   (inline C XMLHttpRequest "
#ifdef TOCCATA_WASM
   EM_ASM_({
     let rqst = objDeref($0); 
     rqst.open(rcvString($1), rcvString($2));
     rqst.send();},
   extractDOMObject(rqst_0),
   (int)method_1,
   (int)url_2
);
#endif
   dec_and_free(method_1, 1);
   dec_and_free(url_2, 1);
   return(rqst_0);\n"))

  ([rqst method url data]
   (assert (instance? XMLHttpRequest rqst))
   (assert (instance? String method))
   (assert (instance? String url))
   (assert (instance? String data))

   (inline C XMLHttpRequest "
#ifdef TOCCATA_WASM
   EM_ASM_({
     let rqst = objDeref($0); 
     rqst.open(rcvString($1), rcvString($2));
     rqst.send(rcvString($3));},
   extractDOMObject(rqst_0),
   (int)method_1,
   (int)url_2,
   (int)data_3);
#endif
   dec_and_free(method_1, 1);
   dec_and_free(url_2, 1);
   dec_and_free(data_3, 1);
   return(rqst_0);\n")))

(defn http-request-handler [r f]
  (inline C wasm/DOMNode "
#ifdef TOCCATA_WASM
  EM_ASM_({
    let rqst = objDeref($0);
    rqst.addEventListener(\"readystatechange\",
                 function(){
                  _decRef(callToccata($1, sendArray([])));
                  if (rqst.readyState == 4) {
                    _decRef($1);
                  }
                 });
          },
  extractDOMObject(r_0), (int)f_1);
#endif
  return(r_0);\n"))

(defn http-request
  ([method url]
   (for [rqst (cont/Continuation (fn [c]
                                   (let [r (new-http-request)]
                                     (http-request-handler r (fn []
                                                               (c r)))
                                     (send-http-request r method url))))
         resp (either (and (= 4 (get-attribute rqst "readyState"))
                           (maybe (cont/continue (get-attribute rqst "responseText"))))
                      (cont/break nothing))]
     resp))
  ([method url data]
   (for [rqst (cont/Continuation (fn [c]
                                   (let [r (new-http-request)]
                                     (http-request-handler r (fn []
                                                               (c r)))
                                     (send-http-request r method url data))))
         resp (either (and (= 4 (get-attribute rqst "readyState"))
                           (maybe (cont/continue (get-attribute rqst "responseText"))))
                      (cont/break nothing))]
     resp)))
